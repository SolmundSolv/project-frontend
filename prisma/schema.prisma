// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String    @id @default(cuid())
  name        String    @default("Product")
  price       Decimal   @default(0)
  img         String    @default("")
  description String    @default("Descripton")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  orders      Order[]
  isActive    Boolean   @default(true)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @default("Category")
  description String    @default("Description")
  products    Product[]
}

model Order {
  id           String      @id @default(cuid())
  number       Int         @unique
  contractor   Contractor  @relation(fields: [contractorId], references: [id])
  contractorId String
  status       OrderStatus @relation(fields: [statusId], references: [id])
  statusId     String
  price        Decimal
  createdAt    DateTime    @default(now())
  products     Product[]
}

model OrderStatus {
  id        String   @id @default(cuid())
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
}

model Contractor {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  lastOrder DateTime?
  createdAt DateTime  @default(now())
  adress    Adress    @relation(fields: [adressId], references: [id])
  adressId  String
  Orders    Order[]
}

model Adress {
  id         String       @id @default(cuid())
  street     String
  building   String
  unit       String?
  city       String
  zip        String
  createdAt  DateTime     @default(now())
  contractor Contractor[]
}

model Employee {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  hiredAt    DateTime
}

model Position {
  id            String     @id @default(cuid())
  name          String
  defaultSalary Decimal
  employers     Employee[]
}

model Raports {
  id        String   @id @default(cuid())
  createdAt DateTime
}

// model ProductsOnOrders {
//     product   Product? @relation(fields: [productId], references: [id])
//     productId String
//     Order     Order?   @relation(fields: [orderId], references: [id])
//     orderId   String

//     @@unique([productId, orderId])
// }
